name: IPFS Publish

on:
  push:
    branches:
      - main

jobs:
  ipfs-publish:
    runs-on: self-hosted
    permissions:
      contents: read
      discussions: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Add folder to IPFS
        id: ipfs_add
        run: |
          CID=$(ipfs add --recursive --cid-version=1 -Q .)
          echo "CID=$CID" >> $GITHUB_ENV

      - name: Prewarm IPFS Gateway
        run: |
          wget --recursive --no-parent --no-host-directories --cut-dirs=1 "https://${{ env.CID }}.eth.sucks/"
          wget --recursive --no-parent --no-host-directories --cut-dirs=1 "https://${{ env.CID }}.eth.sucks/src/"
          wget --recursive --no-parent --no-host-directories --cut-dirs=1 "https://${{ env.CID }}.eth.sucks/assets/"

      - name: Create GitHub Discussion
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Get the commit message
          COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s")
          COMMIT_SHA=$(git rev-parse --short HEAD)
          
          # Create discussion body
          DISCUSSION_BODY="ðŸš€ **New IPFS Deployment**

          **CID:** \`${{ env.CID }}\`
          **Gateway URL:** https://${{ env.CID }}.eth.sucks/
          **Commit:** [\`$COMMIT_SHA\`](https://github.com/${{ github.repository }}/commit/${{ github.sha }}) - $COMMIT_MESSAGE
          **Deployed at:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')

          ---
          This deployment was automatically published to IPFS and is available at the gateway URL above."
          
          # Check if discussions are enabled and get categories using GraphQL
          echo "Fetching discussion categories using GraphQL..."
          
          # GraphQL query to get repository discussion categories
          GRAPHQL_QUERY='{
            "query": "query($owner: String!, $name: String!) { repository(owner: $owner, name: $name) { discussionCategories(first: 10) { nodes { id name } } } }",
            "variables": {
              "owner": "'$(echo ${{ github.repository }} | cut -d'/' -f1)'",
              "name": "'$(echo ${{ github.repository }} | cut -d'/' -f2)'"
            }
          }'
          
          CATEGORIES_RESPONSE=$(gh api graphql --input - <<< "$GRAPHQL_QUERY" 2>&1)
          CATEGORIES_EXIT_CODE=$?
          
          echo "Categories GraphQL response: $CATEGORIES_RESPONSE"
          echo "Exit code: $CATEGORIES_EXIT_CODE"
          
          if [ $CATEGORIES_EXIT_CODE -ne 0 ]; then
            echo "Failed to fetch discussion categories. Error: $CATEGORIES_RESPONSE"
            echo "This might mean discussions are not enabled or there's a permission issue."
            exit 1
          fi
          
          # Check if response contains errors
          if echo "$CATEGORIES_RESPONSE" | jq -e '.errors' >/dev/null 2>&1; then
            echo "GraphQL errors found:"
            echo "$CATEGORIES_RESPONSE" | jq '.errors'
            exit 1
          fi
          
          # Extract categories from GraphQL response
          CATEGORIES=$(echo "$CATEGORIES_RESPONSE" | jq '.data.repository.discussionCategories.nodes' 2>/dev/null)
          
          if [ -z "$CATEGORIES" ] || [ "$CATEGORIES" = "null" ]; then
            echo "No discussion categories found. Discussions might not be enabled."
            exit 1
          fi
          
          # Count categories
          CATEGORY_COUNT=$(echo "$CATEGORIES" | jq length 2>/dev/null || echo "0")
          echo "Found $CATEGORY_COUNT discussion categories"
          
          if [ "$CATEGORY_COUNT" -eq 0 ]; then
            echo "No discussion categories found. Please enable discussions on your repository."
            exit 1
          fi
          
          # List available categories for debugging
          echo "Available categories:"
          echo "$CATEGORIES" | jq -r '.[] | "- \(.name) (ID: \(.id))"' 2>/dev/null || echo "Could not parse categories"
          
          # Try to get the Announcements category ID, fallback to General or first available
          CATEGORY_ID=$(echo "$CATEGORIES" | jq -r '.[] | select(.name=="Announcements") | .id' 2>/dev/null)
          
          if [ -z "$CATEGORY_ID" ] || [ "$CATEGORY_ID" = "null" ]; then
            echo "Announcements category not found, trying General..."
            CATEGORY_ID=$(echo "$CATEGORIES" | jq -r '.[] | select(.name=="General") | .id' 2>/dev/null)
          fi
          
          if [ -z "$CATEGORY_ID" ] || [ "$CATEGORY_ID" = "null" ]; then
            echo "General category not found, using first available category..."
            CATEGORY_ID=$(echo "$CATEGORIES" | jq -r '.[0].id' 2>/dev/null)
          fi
          
          if [ -z "$CATEGORY_ID" ] || [ "$CATEGORY_ID" = "null" ]; then
            echo "Could not determine category ID. Available categories:"
            echo "$CATEGORIES" | jq -r '.[] | "\(.name): \(.id)"' 2>/dev/null || echo "Could not parse categories"
            exit 1
          fi
          
          echo "Using category ID: $CATEGORY_ID"
          
          # Get repository ID for creating discussion
          echo "Getting repository ID..."
          REPO_ID_QUERY='{
            "query": "query($owner: String!, $name: String!) { repository(owner: $owner, name: $name) { id } }",
            "variables": {
              "owner": "'$(echo ${{ github.repository }} | cut -d'/' -f1)'",
              "name": "'$(echo ${{ github.repository }} | cut -d'/' -f2)'"
            }
          }'
          
          REPO_ID_RESPONSE=$(gh api graphql --input - <<< "$REPO_ID_QUERY" 2>&1)
          REPO_ID_EXIT_CODE=$?
          
          if [ $REPO_ID_EXIT_CODE -ne 0 ]; then
            echo "Failed to get repository ID. Error: $REPO_ID_RESPONSE"
            exit 1
          fi
          
          REPOSITORY_ID=$(echo "$REPO_ID_RESPONSE" | jq -r '.data.repository.id' 2>/dev/null)
          echo "Repository ID: $REPOSITORY_ID"
          
          if [ -z "$REPOSITORY_ID" ] || [ "$REPOSITORY_ID" = "null" ]; then
            echo "Could not get repository ID"
            exit 1
          fi
          
          # Create the discussion using GraphQL
          echo "Creating discussion..."
          
          # Escape the discussion body for JSON
          ESCAPED_BODY=$(echo "$DISCUSSION_BODY" | jq -Rs .)
          
          CREATE_DISCUSSION_QUERY='{
            "query": "mutation($repositoryId: ID!, $categoryId: ID!, $title: String!, $body: String!) { createDiscussion(input: {repositoryId: $repositoryId, categoryId: $categoryId, title: $title, body: $body}) { discussion { url } } }",
            "variables": {
              "repositoryId": "'$REPOSITORY_ID'",
              "categoryId": "'$CATEGORY_ID'",
              "title": "IPFS Deployment - CID: ${{ env.CID }}",
              "body": '$ESCAPED_BODY'
            }
          }'
          
          CREATE_RESPONSE=$(gh api graphql --input - <<< "$CREATE_DISCUSSION_QUERY" 2>&1)
          CREATE_EXIT_CODE=$?
          
          if [ $CREATE_EXIT_CODE -eq 0 ]; then
            # Check if there were GraphQL errors
            if echo "$CREATE_RESPONSE" | jq -e '.errors' >/dev/null 2>&1; then
              echo "Failed to create discussion. GraphQL errors:"
              echo "$CREATE_RESPONSE" | jq '.errors'
            else
              DISCUSSION_URL=$(echo "$CREATE_RESPONSE" | jq -r '.data.createDiscussion.discussion.url' 2>/dev/null)
              echo "Discussion created successfully!"
              echo "Discussion URL: $DISCUSSION_URL"
            fi
          else
            echo "Failed to create discussion. Error: $CREATE_RESPONSE"
          fi
